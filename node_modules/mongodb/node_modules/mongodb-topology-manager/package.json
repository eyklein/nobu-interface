{
  "_args": [
    [
      {
        "raw": "mongodb-topology-manager@1.0.x",
        "scope": null,
        "escapedName": "mongodb-topology-manager",
        "name": "mongodb-topology-manager",
        "rawSpec": "1.0.x",
        "spec": ">=1.0.0 <1.1.0",
        "type": "range"
      },
      "/Users/eyklein/OneDrive/NYU/thesis/Web_Watson/heroku/node-express-mongodb-heroku-boilerplate/node_modules/mongodb"
    ]
  ],
  "_from": "mongodb-topology-manager@>=1.0.0 <1.1.0",
  "_id": "mongodb-topology-manager@1.0.11",
  "_inCache": true,
  "_location": "/mongodb-topology-manager",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/mongodb-topology-manager-1.0.11.tgz_1483443057544_0.07148003927432"
  },
  "_npmUser": {
    "name": "christkv",
    "email": "christkv@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {
    "require_optional": "1.0.0"
  },
  "_requested": {
    "raw": "mongodb-topology-manager@1.0.x",
    "scope": null,
    "escapedName": "mongodb-topology-manager",
    "name": "mongodb-topology-manager",
    "rawSpec": "1.0.x",
    "spec": ">=1.0.0 <1.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/mongodb-topology-manager/-/mongodb-topology-manager-1.0.11.tgz",
  "_shasum": "1970c745b85edfa48011045a8fe6d03f65b5a1f0",
  "_shrinkwrap": null,
  "_spec": "mongodb-topology-manager@1.0.x",
  "_where": "/Users/eyklein/OneDrive/NYU/thesis/Web_Watson/heroku/node-express-mongodb-heroku-boilerplate/node_modules/mongodb",
  "author": {
    "name": "Christian Amor Kvalheim"
  },
  "bugs": {
    "url": "https://github.com/christkv/mongodb-topology-manager/issues"
  },
  "dependencies": {
    "babel-core": "^6.10.4",
    "babel-polyfill": "^6.9.1",
    "bluebird": "^3.4.1",
    "co": "^4.6.0",
    "es6-promise": "^3.2.1",
    "kerberos": "0.0.17",
    "mkdirp": "^0.5.1",
    "mongodb-core": "^1.2.24",
    "rimraf": "^2.4.3"
  },
  "description": "Localhost MongoDB Topology Management API",
  "devDependencies": {
    "babel-cli": "^6.10.1",
    "babel-preset-es2015": "6.9.0",
    "mocha": "^2.3.4"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "1970c745b85edfa48011045a8fe6d03f65b5a1f0",
    "tarball": "https://registry.npmjs.org/mongodb-topology-manager/-/mongodb-topology-manager-1.0.11.tgz"
  },
  "gitHead": "4d5b66abda8066d00493d4ca6e7dc41722548498",
  "homepage": "https://github.com/christkv/mongodb-topology-manager",
  "keywords": [
    "mongodb",
    "topology",
    "management",
    "api"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "christkv",
      "email": "christkv@gmail.com"
    }
  ],
  "name": "mongodb-topology-manager",
  "optionalDependencies": {},
  "readme": "# The MongoDB Topology Management API\n\nThe MongoDB Topology Management API is an API to allow to programatically spin up a MongoDB instance, Replicaset or Sharded cluster on your local machine.\n\n## Setting up a single instance\n\nIt's very simple to create a single running MongoDB instance. All examples are using **ES6**.\n\n```js\nvar Server = require('mongodb-topology-manager').Server;\n// Create new instance\nvar server = new Server('binary', {\n  dbpath: f('%s/db', __dirname)\n});\n\n// Perform discovery\nvar result = yield server.discover();\n// Purge the directory\nyield server.purge();\n// Start process\nyield server.start();\n// Stop the process\nyield server.stop();\n```\n\n## Setting up a replicaset\n\nIt's equally easy to create a new Replicaset instance.\n\n```js\nvar ReplSet = require('mongodb-topology-manager').ReplSet;\n\n// Create new instance\nvar topology = new ReplSet('mongod', [{\n  // mongod process options\n  options: {\n    bind_ip: 'localhost', port: 31000, dbpath: f('%s/../db/31000', __dirname)\n  }\n}, {\n  // mongod process options\n  options: {\n    bind_ip: 'localhost', port: 31001, dbpath: f('%s/../db/31001', __dirname)\n  }\n}, {\n  // Type of node\n  arbiterOnly: true,\n  // mongod process options\n  options: {\n    bind_ip: 'localhost', port: 31002, dbpath: f('%s/../db/31002', __dirname)\n  }\n}], {\n  replSet: 'rs'\n});\n\n// Perform discovery\nvar result = yield server.discover();\n// Purge the directory\nyield server.purge();\n// Start process\nyield server.start();\n// Stop the process\nyield server.stop();\n```\n\nEach of the node objects can take the following options at the top level.\n\nField | Description\n----------------------------------|-------------------------\narbiter | node should become an arbiter.\nbuilIndexes | should build indexes on the node.\nhidden | node should be hidden.\nbuilIndexes | should build indexes on the node.\npriority | node should have the following priority.\ntags | tags for the node.\nslaveDelay | the node slaveDelay for replication.\nvotes | additional votes for the specific node.\n\nThe **object** contains the options that are used to start up the actual `mongod` instance.\n\nThe Replicaset manager has the following methods\n\nMethod | Description\n----------------------------------|-------------------------\nReplset.prototype.discover | Return the information from running mongod with --version flag.\nReplset.prototype.start | Start the Replicaset.\nReplset.prototype.primary | Return the current Primary server manager.\nReplset.prototype.shardUrl | Return a add shard url string.\nReplset.prototype.url | Return a connection url.\nReplset.prototype.arbiters | Return a list of arbiter managers.\nReplset.prototype.secondaries | Return a list of secondary managers.\nReplset.prototype.passives | Return a list of secondary passive managers.\nReplset.prototype.waitForPrimary | Wait for a new primary to be elected or for a specific timeout period.\nReplset.prototype.stepDownPrimary | Stepdown the primary.\nReplset.prototype.configuration | Return the replicaset configuration.\nReplset.prototype.reconfigure | Perform a reconfiguration of the replicaset.\nReplset.prototype.serverConfiguration | Get the initial node configuration for specific server manager.\nReplset.prototype.addMember | Add a new member to the set.\nReplset.prototype.removeMember | Remove a member to the set.\nReplset.prototype.maintenance | Put a node into maintenance mode.\nReplset.prototype.stop | Stop the replicaset.\nReplset.prototype.restart | Restart the replicaset.\nReplset.prototype.purge | Purge all the data directories for the replicaset.\n\n## Setting up a sharded system\n\nIt's a little bit more complicated to set up a Sharded system but not much more.\n\n```js\nvar Sharded = require('mongodb-topology-manager').Sharded;\n\n// Create new instance\nvar topology = new Sharded({\n  mongod: 'mongod', mongos: 'mongos'\n});\n\n// Add one shard\nyield topology.addShard([{\n  options: {\n    bind_ip: 'localhost', port: 31000, dbpath: f('%s/../db/31000', __dirname)\n  }\n}, {\n  options: {\n    bind_ip: 'localhost', port: 31001, dbpath: f('%s/../db/31001', __dirname)\n  }\n}, {\n  // Type of node\n  arbiter: true,\n  // mongod process options\n  options: {\n    bind_ip: 'localhost', port: 31002, dbpath: f('%s/../db/31002', __dirname)\n  }\n}], {\n  replSet: 'rs1'\n});\n\n// Add one shard\nyield topology.addShard([{\n  options: {\n    bind_ip: 'localhost', port: 31010, dbpath: f('%s/../db/31010', __dirname)\n  }\n}, {\n  options: {\n    bind_ip: 'localhost', port: 31011, dbpath: f('%s/../db/31011', __dirname)\n  }\n}, {\n  // Type of node\n  arbiter: true,\n  // mongod process options\n  options: {\n    bind_ip: 'localhost', port: 31012, dbpath: f('%s/../db/31012', __dirname)\n  }\n}], {\n  replSet: 'rs2'\n});\n\n// Add configuration servers\nyield topology.addConfigurationServers([{\n  options: {\n    bind_ip: 'localhost', port: 35000, dbpath: f('%s/../db/35000', __dirname)\n  }\n}, {\n  options: {\n    bind_ip: 'localhost', port: 35001, dbpath: f('%s/../db/35001', __dirname)\n  }\n}, {\n  options: {\n    bind_ip: 'localhost', port: 35002, dbpath: f('%s/../db/35002', __dirname)\n  }\n}], {\n  replSet: 'rs3'\n});\n\n// Add proxies\nyield topology.addProxies([{\n  bind_ip: 'localhost', port: 51000, configdb: 'localhost:35000,localhost:35001,localhost:35002'\n}, {\n  bind_ip: 'localhost', port: 51001, configdb: 'localhost:35000,localhost:35001,localhost:35002'\n}], {\n  binary: 'mongos'\n});\n\n// Start up topology\nyield topology.start();\n\n// Shard db\nyield topology.enableSharding('test');\n\n// Shard a collection\nyield topology.shardCollection('test', 'testcollection', {_id: 1});\n\n// Stop the topology\nyield topology.stop();\n```\n\nThe Sharded manager has the following methods\n\nMethod | Description\n----------------------------------|-------------------------\nReplset.prototype.discover | Return the information from running mongod with --version flag.\nReplset.prototype.start | Start the Sharded cluster.\nReplset.prototype.stop | Stop the replicaset.\nReplset.prototype.restart | Restart the replicaset.\nReplset.prototype.purge | Purge all the data directories for the replicaset.\nReplset.prototype.addShard | Add a new shard to the cluster.\nReplset.prototype.addConfigurationServers | Add a set of nodes to be configuration servers.\nReplSet.prototype.addProxies | Add a set of mongo proxies to the cluster.\nReplSet.prototype.enableSharding | Enable sharding on a specific db.\nReplSet.prototype.shardCollection | Shard a collection.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/christkv/mongodb-topology-manager.git"
  },
  "scripts": {
    "test": "mocha --compilers js:babel-core/register --recursive"
  },
  "version": "1.0.11"
}
